#!/usr/bin/env node
'use strict';

// module dependences
var server = require( '../server' );
var debug = require( 'debug','express:server' );
var http = require( 'http' );


// create http server
var httpPort = normalizePort( process.env.PORT || 3000 );
var app = server.Server.bootstrap().app;
app.set( 'port', httpPort );
var httpServer = http.createServer( app );


// listen on provided ports
httpServer.listen( httpPort );

// listen error handler
httpServer.on( 'error', onError );

// start listening on port
httpServer.on( 'listening', onListening );


// normalize a port into a number, string or false
function normalizePort( pretend_port ) {
    var port = parseInt( pretend_port, 10 );

    if( isNaN( pretend_port ) ) {
        // name pipe
        return pretend_port;
    }

    if( pretend_port >= 0 ) {
        // port number
        return port;
    }

    return false;
}


// event listener for http sever 'error' event
function onError( error ) {
    if( error.syscall !== 'listen' ) {
        throw error;
    }

    var bind = typeof port === 'string'
    ? "Pipe " + port
    : "Port " + port;
    
    // handle specific listen errors with friendly messages
    switch( error.code ) {
        case 'EACCES':
            console.error( bind + ' requires elevated privileges' );
            process.exit( 1 );
            break;
        case 'EADDRINUSE':
            console.error( bind + ' is already in use' );
            process.exit( 1 );
            break;
        default:
            throw error;
    }
}


// event listeing for http server
function onListening() {
    var addr = httpServer.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' +  addr
        : 'port ' + addr.port;
    debug( 'Listening on ' + bind );
}
